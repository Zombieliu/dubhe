  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module constantinople::encounter_schema {

  use std::ascii::String;

  use std::ascii::string;

  use sui::package::UpgradeCap;

  use std::type_name;

  use dubhe::storage_migration;

  use dubhe::storage_value::{Self, StorageValue};

  use dubhe::storage_map::{Self, StorageMap};

  use dubhe::storage_double_map::{Self, StorageDoubleMap};

  use sui::dynamic_field as df;

  use sui::sui::SUI;

  use sui::coin::Coin;

  use sui::balance::Balance;

  use constantinople::monster_type::MonsterType;

  use constantinople::direction::Direction;

  use constantinople::terrain_type::TerrainType;

  use constantinople::monster_catch_result::MonsterCatchResult;

  use constantinople::map_config::MapConfig;

  use constantinople::position::Position;

  use constantinople::monster_info::MonsterInfo;

  public struct Encounter has key, store {
    id: UID,
  }

  public fun borrow_monster_info(self: &Encounter): &StorageMap<address, MonsterInfo> {
    storage_migration::borrow_field(&self.id, b"monster_info")
  }

  public(package) fun monster_info(self: &mut Encounter): &mut StorageMap<address, MonsterInfo> {
    storage_migration::borrow_mut_field(&mut self.id, b"monster_info")
  }

  public fun borrow_trigger(self: &Encounter): &StorageMap<address, bool> {
    storage_migration::borrow_field(&self.id, b"trigger")
  }

  public(package) fun trigger(self: &mut Encounter): &mut StorageMap<address, bool> {
    storage_migration::borrow_mut_field(&mut self.id, b"trigger")
  }

  public(package) fun create(ctx: &mut TxContext): Encounter {
    let mut id = object::new(ctx);
    storage_migration::add_field<StorageMap<address, MonsterInfo>>(&mut id, b"monster_info", storage_map::new());
    storage_migration::add_field<StorageMap<address, bool>>(&mut id, b"trigger", storage_map::new());
    Encounter { id }
  }

  public fun migrate(_encounter: &mut Encounter, _cap: &UpgradeCap) {}

  // ======================================== View Functions ========================================

  public fun get_monster_info(self: &Encounter, key: address): &MonsterInfo {
    self.borrow_monster_info().borrow(key)
  }

  public fun get_monster_info_keys(self: &Encounter): vector<address> {
    self.borrow_monster_info().keys()
  }

  public fun get_monster_info_values(self: &Encounter): vector<MonsterInfo> {
    self.borrow_monster_info().values()
  }

  public fun get_trigger(self: &Encounter, key: address): &bool {
    self.borrow_trigger().borrow(key)
  }

  public fun get_trigger_keys(self: &Encounter): vector<address> {
    self.borrow_trigger().keys()
  }

  public fun get_trigger_values(self: &Encounter): vector<bool> {
    self.borrow_trigger().values()
  }

  // =========================================================================================================
}
